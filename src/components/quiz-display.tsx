// This file is generated by Firebase Studio.
'use client';

import type { QuizQuestion } from '@/ai/flows/generate-quiz-flow';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useState } from 'react';
import { CheckCircle, XCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface QuizDisplayProps {
  isOpen: boolean;
  onClose: () => void;
  questions: QuizQuestion[];
  topic: string;
  level: 'Beginner' | 'Intermediate' | 'Advanced';
}

interface AnswerState {
  selectedOption: string | null;
  isCorrect: boolean | null;
}

export default function QuizDisplay({
  isOpen,
  onClose,
  questions,
  topic,
  level,
}: QuizDisplayProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<number, AnswerState>>({});
  const [showResults, setShowResults] = useState(false);

  const currentQuestion = questions[currentQuestionIndex];

  const handleOptionChange = (value: string) => {
    setAnswers((prev) => ({
      ...prev,
      [currentQuestionIndex]: {
        selectedOption: value,
        isCorrect: null, // Reset correctness check until submission
      },
    }));
  };

  const handleSubmitAnswer = () => {
    const selected = answers[currentQuestionIndex]?.selectedOption;
    if (!selected) return; // Don't submit if nothing selected

    const isCorrect = selected === currentQuestion.correctAnswer;
    setAnswers((prev) => ({
      ...prev,
      [currentQuestionIndex]: {
        ...prev[currentQuestionIndex],
        isCorrect: isCorrect,
      },
    }));
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      // Reached the end, show results
      setShowResults(true);
    }
  };

  const handleRestartQuiz = () => {
     setCurrentQuestionIndex(0);
     setAnswers({});
     setShowResults(false);
  };

   const calculateScore = () => {
    return Object.values(answers).filter(a => a.isCorrect === true).length;
  };

  const score = calculateScore();


  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px] flex flex-col max-h-[90vh]">
        <DialogHeader>
          <DialogTitle>
            {topic} Quiz ({level})
          </DialogTitle>
          <DialogDescription>
            Test your knowledge! Select the best answer for each question.
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="flex-grow pr-6 -mr-6"> {/* Add padding-right to ScrollArea and negative margin to DialogContent */}
          <div className="py-4 space-y-6">
            {!showResults && currentQuestion && (
              <div key={currentQuestionIndex}>
                <p className="font-semibold mb-4">
                  Question {currentQuestionIndex + 1} of {questions.length}
                </p>
                <p className="mb-4">{currentQuestion.question}</p>
                <RadioGroup
                  value={answers[currentQuestionIndex]?.selectedOption ?? undefined}
                  onValueChange={handleOptionChange}
                  className="space-y-2"
                  disabled={answers[currentQuestionIndex]?.isCorrect !== null} // Disable after submitting
                >
                  {currentQuestion.options.map((option, index) => {
                    const answerState = answers[currentQuestionIndex];
                    const isSelected = answerState?.selectedOption === option;
                    const isCorrectAnswer = currentQuestion.correctAnswer === option;
                    const showFeedback = answerState?.isCorrect !== null; // Only show feedback after submit

                    return (
                        <div
                        key={index}
                        className={cn(
                          "flex items-center space-x-3 rounded-md border p-3 transition-colors",
                          showFeedback && isCorrectAnswer && "border-green-500 bg-green-500/10",
                          showFeedback && isSelected && !isCorrectAnswer && "border-red-500 bg-red-500/10",
                          !showFeedback && isSelected && "border-primary",
                           answerState?.isCorrect !== null ? "cursor-not-allowed opacity-70" : "cursor-pointer hover:bg-accent/50"
                        )}
                        onClick={() => answerState?.isCorrect === null && handleOptionChange(option)} // Allow clicking the div
                      >
                         <RadioGroupItem value={option} id={`q${currentQuestionIndex}-o${index}`} disabled={answerState?.isCorrect !== null}/>
                        <Label
                          htmlFor={`q${currentQuestionIndex}-o${index}`}
                          className={cn("flex-1", answerState?.isCorrect !== null ? "cursor-not-allowed" : "cursor-pointer" )}
                        >
                          {option}
                        </Label>
                         {showFeedback && isCorrectAnswer && <CheckCircle className="h-5 w-5 text-green-500" />}
                         {showFeedback && isSelected && !isCorrectAnswer && <XCircle className="h-5 w-5 text-red-500" />}
                      </div>
                    );
                  })}
                </RadioGroup>
              </div>
            )}

             {showResults && (
                <div className="text-center space-y-4">
                    <h3 className="text-xl font-semibold">Quiz Completed!</h3>
                    <p className="text-lg">
                    Your Score: <span className="font-bold">{score}</span> out of <span className="font-bold">{questions.length}</span>
                    </p>
                    <p className="text-muted-foreground">
                        {score === questions.length ? "Excellent work!" : score >= questions.length / 2 ? "Good job!" : "Keep practicing!"}
                    </p>
                    {/* Optional: Add a button to review answers */}
                    <Button onClick={handleRestartQuiz}>Take Quiz Again</Button>
                </div>
            )}

          </div>
        </ScrollArea>

        <DialogFooter className="mt-4 pt-4 border-t">
            {!showResults && (
                 <div className="flex justify-between w-full">
                    <Button
                        variant="outline"
                        onClick={handleSubmitAnswer}
                        disabled={!answers[currentQuestionIndex]?.selectedOption || answers[currentQuestionIndex]?.isCorrect !== null}
                    >
                        Submit Answer
                    </Button>
                    <Button
                        onClick={handleNextQuestion}
                         disabled={answers[currentQuestionIndex]?.isCorrect === null} // Enable only after submitting
                    >
                        {currentQuestionIndex < questions.length - 1 ? 'Next Question' : 'Show Results'}
                    </Button>
                </div>
            )}
             {showResults && (
                <DialogClose asChild>
                    <Button variant="outline">Close</Button>
                 </DialogClose>
            )}

        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
