
// This file is generated by Firebase Studio.
'use client';

import { useState, useEffect, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation'; // Import useRouter
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { ArrowLeft, MessageCircle, Moon, Sun, Loader2, Pencil, Trash2, ClipboardCheck } from 'lucide-react';
import Link from 'next/link';
import AiTutor from '@/components/ai-tutor';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'; // Keep Card imports if needed elsewhere
import { useToast } from '@/hooks/use-toast';
import { generateQuiz, type GenerateQuizInput, type GenerateQuizOutput, type QuizQuestion } from '@/ai/flows/generate-quiz-flow';
import QuizDisplay from '@/components/quiz-display';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import EditTopicDialog from '@/components/edit-topic-dialog';
import TopicContentDisplay from '@/components/topic-content-display'; // Import the new content display component


// --- Topic Data Management ---

interface TopicDetail {
  id: string;
  title: string;
  level: 'Beginner' | 'Intermediate' | 'Advanced'; // Level is mandatory here
  description?: string; // Description might be optional
  content: Record<string, string[]>; // Beginner, Intermediate, Advanced content arrays of strings
}


const LOCAL_STORAGE_DETAILS_KEY = 'eduai-topic-details'; // Key for the detailed content
const LOCAL_STORAGE_DELETED_TOPICS_KEY = 'eduai-deleted-topics';


// Function to get topic details from localStorage
const getTopicDetailsFromStorage = (): Record<string, TopicDetail> => {
  if (typeof window === 'undefined') {
    return {}; // Return empty object during SSR
  }
  try {
    const storedDetails = localStorage.getItem(LOCAL_STORAGE_DETAILS_KEY);
    return storedDetails ? JSON.parse(storedDetails) : {};
  } catch (error) {
    console.error("Error accessing or parsing localStorage for topic details:", error);
    return {}; // Fallback to empty on error
  }
};

// Function to save topic details to localStorage
const saveTopicDetailsToStorage = (details: Record<string, TopicDetail>) => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem(LOCAL_STORAGE_DETAILS_KEY, JSON.stringify(details));
       window.dispatchEvent(new StorageEvent('storage', { key: LOCAL_STORAGE_DETAILS_KEY }));
    } catch (error) {
      console.error("Error saving topic details to localStorage:", error);
    }
  }
};


// Function to delete progress data for a topic
const deleteProgressData = (topicId: string) => {
  if (typeof window !== 'undefined') {
    const progressKey = `eduai-progress-${topicId}`;
    try {
      localStorage.removeItem(progressKey);
      console.log(`Removed progress data for topic: ${topicId}`);
    } catch (error) {
      console.error(`Error removing progress data for ${topicId}:`, error);
    }
  }
};


// --- End Topic Data Management ---


export default function TopicPage() {
  const params = useParams();
  const router = useRouter();
  const { toast } = useToast();
  const topicId = params.topicId as string;

  const [topicData, setTopicData] = useState<TopicDetail | null>(null);
  const [topicLevel, setTopicLevel] = useState<'Beginner' | 'Intermediate' | 'Advanced' | null>(null);
  const [loading, setLoading] = useState(true);
  const [theme, setTheme] = useState<'light' | 'dark'>('dark');
  const [showAiTutor, setShowAiTutor] = useState(false);
  const [isGeneratingQuiz, setIsGeneratingQuiz] = useState(false);
  const [quizQuestions, setQuizQuestions] = useState<QuizQuestion[]>([]);
  const [showQuiz, setShowQuiz] = useState(false);
  const [showQuizConfirmation, setShowQuizConfirmation] = useState(false);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [numQuestions, setNumQuestions] = useState(3);

  const loadTopicData = useCallback(() => {
    setLoading(true);
    const allDetails = getTopicDetailsFromStorage();
    const data = allDetails[topicId];
    const level = data?.level ?? null;

    if (!data) {
        console.log(`Topic details not found for ID: ${topicId}. User might be redirected or shown a not found message.`);
    }
    setTopicData(data || null);
    setTopicLevel(level);
    setLoading(false);
  }, [topicId]);


  useEffect(() => {
    const savedTheme = typeof window !== 'undefined' ? localStorage.getItem('theme') as 'light' | 'dark' | null : 'dark';
    if (savedTheme) {
      setTheme(savedTheme);
      if (savedTheme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    } else if (typeof window !== 'undefined') {
        document.documentElement.classList.add('dark'); // Default to dark
    }
    loadTopicData();
  }, [topicId, loadTopicData]);

  useEffect(() => {
    if (typeof window !== 'undefined') {
        if (theme === 'dark') {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
        } else {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
        }
    }
  }, [theme]);


  const toggleTheme = useCallback(() => {
    setTheme((prevTheme) => {
        const newTheme = prevTheme === 'light' ? 'dark' : 'light';
        // localStorage and class toggling is handled by the useEffect above
        return newTheme;
    });
  }, []); // setTheme is stable

  const handleStartQuizGeneration = useCallback(async () => {
    if (!topicData || !topicLevel) return;
    setShowQuizConfirmation(false);
    setIsGeneratingQuiz(true);
    setQuizQuestions([]);

    try {
        const input: GenerateQuizInput = {
            topic: topicData.title,
            level: topicLevel,
            numQuestions: numQuestions,
        };
        const output: GenerateQuizOutput = await generateQuiz(input);

        if (output.quiz && output.quiz.length > 0) {
            setQuizQuestions(output.quiz);
            setShowQuiz(true);
        } else {
             toast({
                title: 'Quiz Generation Failed',
                description: 'Could not generate quiz questions. Please try again.',
                variant: 'destructive',
            });
        }
    } catch (error) {
        console.error('Error generating quiz:', error);
        const errorMsg = error instanceof Error && error.message.includes('API key not valid')
            ? 'Invalid or missing API key for quiz generation.'
            : 'An error occurred while generating the quiz.';
        toast({
            title: 'Error Generating Quiz',
            description: errorMsg + ' Displaying simulated quiz data instead.',
            variant: 'destructive',
        });
        const fallbackOutput: GenerateQuizOutput = {
          quiz: Array.from({ length: numQuestions }, (_, i) => ({
            question: `Simulated Question ${i + 1} for ${topicData.title} (${topicLevel})?`,
            options: [`Option A${i}`, `Option B${i}`, `Option C${i}`, `Option D${i}`],
            correctAnswer: `Option B${i}`,
          }))
        };
        setQuizQuestions(fallbackOutput.quiz);
        setShowQuiz(true);
    } finally {
        setIsGeneratingQuiz(false);
    }
  }, [topicData, topicLevel, numQuestions, toast]); // Dependencies are exhaustive

  const handleOpenQuizConfirmation = useCallback(() => {
      setShowQuizConfirmation(true);
  }, []); // setShowQuizConfirmation is stable

  const handleOpenEditDialog = useCallback(() => {
    if (!topicData) return;
    setShowEditDialog(true);
  }, [topicData]); // setShowEditDialog is stable

  const handleSaveTopic = useCallback((updatedTitle: string, updatedDescription: string) => {
     if (!topicData || !topicLevel) return;
     console.log(`Saving topic: ${updatedTitle} (ID: ${topicId})`);
     const currentDetails = getTopicDetailsFromStorage();
     if (currentDetails[topicId]) {
        currentDetails[topicId] = {
            ...currentDetails[topicId],
            title: updatedTitle,
            description: updatedDescription,
            level: topicLevel, // Ensure level is preserved
        };
        saveTopicDetailsToStorage(currentDetails);
     } else {
         console.warn(`Attempted to save details for non-existent topic ID: ${topicId}`);
         return;
     }
     setTopicData(prevData => prevData ? { ...prevData, title: updatedTitle, description: updatedDescription, level: prevData.level, content: prevData.content, id: prevData.id } : null);
     toast({
       title: 'Topic Updated',
       description: `"${updatedTitle}" has been updated successfully.`,
     });
     setShowEditDialog(false);
  }, [topicData, topicLevel, topicId, toast]); // Dependencies are exhaustive

  const handleDeleteTopic = useCallback(() => {
    if (!topicData) return;
    console.log(`Deleting topic: ${topicData.title} (ID: ${topicId})`);

    const currentDetails = getTopicDetailsFromStorage();
    delete currentDetails[topicId];
    saveTopicDetailsToStorage(currentDetails);

    deleteProgressData(topicId);

    // Notify home page to remove from its state by setting a flag in localStorage
    if (typeof window !== 'undefined') {
        const deletedTopicIdsString = localStorage.getItem(LOCAL_STORAGE_DELETED_TOPICS_KEY);
        const deletedTopicIds: string[] = deletedTopicIdsString ? JSON.parse(deletedTopicIdsString) : [];
        if (!deletedTopicIds.includes(topicId)) {
            deletedTopicIds.push(topicId);
            localStorage.setItem(LOCAL_STORAGE_DELETED_TOPICS_KEY, JSON.stringify(deletedTopicIds));
            // Dispatch a storage event so other tabs/components (like home page) can react
            window.dispatchEvent(new StorageEvent('storage', { key: LOCAL_STORAGE_DELETED_TOPICS_KEY }));
        }
    }


    toast({
      title: 'Topic Deleted',
      description: `"${topicData.title}" has been deleted permanently.`,
      variant: 'destructive'
    });

    setShowDeleteConfirmation(false);
    router.push('/');
  }, [topicData, topicId, toast, router]); // Dependencies are exhaustive

  const openAiTutor = useCallback(() => setShowAiTutor(true), []);
  const closeAiTutor = useCallback(() => setShowAiTutor(false), []);
  const closeEditDialog = useCallback(() => setShowEditDialog(false), []);
  const closeQuizDisplay = useCallback(() => {
    setShowQuiz(false);
    setQuizQuestions([]);
  }, []);


  if (loading) {
    return (
      <div className="container mx-auto p-4 md:p-6 lg:p-8 flex flex-col gap-6 min-h-screen">
        <header className="flex items-center justify-between flex-wrap gap-4 p-4 bg-secondary rounded-md header-border">
           <div className="flex items-center gap-4">
             <Skeleton className="h-8 w-8 rounded-md" />
             <Skeleton className="h-8 w-48 rounded-md" />
           </div>
           <div className="flex items-center gap-1 sm:gap-2 flex-shrink-0">
             <Skeleton className="h-8 w-8 rounded-md" />
             <Skeleton className="h-8 w-8 rounded-md" />
             <Skeleton className="h-8 w-8 rounded-full" />
             <Skeleton className="h-9 w-20 sm:w-28 rounded-md" />
           </div>
        </header>
        <div className="p-4 space-y-4 flex-grow">
            <Skeleton className="h-6 w-24 mb-4 rounded-md" />
             <div className="space-y-4">
                 <Card className="border-border shadow-sm">
                   <CardHeader className="pb-2">
                      <Skeleton className="h-5 w-32 mb-2" />
                       <Skeleton className="h-2 w-full" />
                   </CardHeader>
                   <CardContent className="space-y-3 pt-4">
                       <div className="flex items-center space-x-3">
                         <Skeleton className="h-4 w-4" />
                         <Skeleton className="h-4 w-4/5" />
                       </div>
                       <div className="flex items-center space-x-3">
                         <Skeleton className="h-4 w-4" />
                         <Skeleton className="h-4 w-3/4" />
                       </div>
                        <div className="flex items-center space-x-3">
                         <Skeleton className="h-4 w-4" />
                         <Skeleton className="h-4 w-5/6" />
                       </div>
                   </CardContent>
                </Card>
             </div>
            <div className="mt-6">
                 <Skeleton className="h-10 w-36 rounded-md"/>
            </div>
        </div>
         <footer className="p-4 mt-auto text-center">
           <Skeleton className="h-4 w-1/2 mx-auto rounded-md"/>
         </footer>
      </div>
    );
  }

  if (!topicData || !topicLevel) {
    return (
        <div className="container mx-auto p-4 md:p-6 lg:p-8 flex flex-col items-center justify-center gap-6 min-h-screen text-center">
            <h1 className="text-2xl font-bold text-destructive">Topic Not Found</h1>
            <p className="text-muted-foreground">The topic you requested ({topicId}) may have been deleted or does not exist.</p>
             <Link href="/" passHref>
                <Button>
                     <ArrowLeft className="mr-2 h-4 w-4" /> Go Back Home
                </Button>
            </Link>
        </div>
    );
  }


  return (
    <div className="container mx-auto p-4 md:p-6 lg:p-8 flex flex-col gap-6 min-h-screen">
      <header className="flex items-center justify-between flex-wrap gap-y-4 p-4 bg-secondary rounded-md header-border">
        <div className="flex items-center gap-2 sm:gap-4 flex-shrink min-w-0 mr-4">
          <Link href="/" passHref>
            <Button aria-label="Go back home" className="flex-shrink-0">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <h1 className="text-lg sm:text-xl md:text-2xl font-bold break-words">
            {topicData.title}
          </h1>
        </div>

         <div className="flex items-center gap-1 sm:gap-2 flex-shrink-0">
            <Button onClick={handleOpenEditDialog} aria-label="Edit topic">
              <Pencil className="h-4 w-4 sm:h-5 sm:w-5" />
            </Button>

            <AlertDialog open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>
              <AlertDialogTrigger asChild>
                  <Button aria-label="Delete topic" className="text-destructive hover:bg-destructive/10 hover:text-destructive">
                    <Trash2 className="h-4 w-4 sm:h-5 sm:w-5" />
                  </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete the topic
                    "{topicData.title}" and all associated progress.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel onClick={() => setShowDeleteConfirmation(false)}>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleDeleteTopic} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
                    Delete Topic
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>

           <Button className="icon-button" onClick={toggleTheme} aria-label="Toggle theme">
             {theme === 'light' ? <Moon className="h-4 w-4 sm:h-5 sm:w-5" /> : <Sun className="h-4 w-4 sm:h-5 sm:w-5" />}
           </Button>

           <Button onClick={openAiTutor}>
             <MessageCircle className="mr-1 h-3 w-3 sm:mr-2 sm:h-4 sm:w-4" />
             <span className="hidden sm:inline">Ask AI Tutor</span>
             <span className="sm:hidden">AI</span>
           </Button>
         </div>
      </header>

      <section className="p-4 flex-grow space-y-6">
          <div className="mb-4">
              <span className="level-badge">{topicLevel}</span>
          </div>

          <TopicContentDisplay
             topicId={topicId}
             content={topicData.content}
             initialLevel={topicLevel}
          />

           <div className="mt-6">
               <Button className="outline" onClick={handleOpenQuizConfirmation} disabled={isGeneratingQuiz}>
                 {isGeneratingQuiz ? (
                   <>
                     <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                     Generating Quiz...
                   </>
                 ) : (
                   <>
                     <ClipboardCheck className="mr-2 h-4 w-4" /> Take a Quiz
                   </>
                 )}
               </Button>
           </div>
      </section>

      {topicData && topicLevel && (
          <AiTutor
            isOpen={showAiTutor}
            onClose={closeAiTutor}
            topic={topicData.title}
            level={topicLevel}
          />
      )}

      {topicData && (
        <EditTopicDialog
          isOpen={showEditDialog}
          onClose={closeEditDialog}
          topicTitle={topicData.title}
          topicDescription={topicData.description ?? ''}
          onSave={handleSaveTopic}
        />
      )}


        {topicData && topicLevel && (
            <AlertDialog open={showQuizConfirmation} onOpenChange={setShowQuizConfirmation}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                    <AlertDialogTitle>Generate Quiz?</AlertDialogTitle>
                    <AlertDialogDescription>
                        Select the number of questions for your {topicLevel} {topicData.title} quiz.
                    </AlertDialogDescription>
                    </AlertDialogHeader>
                    <div className="py-4">
                        <Label htmlFor="num-questions">Number of Questions (1-10):</Label>
                        <Select
                            value={String(numQuestions)}
                            onValueChange={(value: string) => setNumQuestions(parseInt(value))}
                        >
                            <SelectTrigger id="num-questions" className="w-[180px] mt-2">
                                <SelectValue placeholder="Select number" />
                            </SelectTrigger>
                            <SelectContent>
                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(n => (
                                    <SelectItem key={n} value={String(n)}>{n}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                    <AlertDialogFooter>
                    <AlertDialogCancel onClick={() => setShowQuizConfirmation(false)}>Cancel</AlertDialogCancel>
                    <AlertDialogAction onClick={handleStartQuizGeneration} disabled={isGeneratingQuiz}>
                        {isGeneratingQuiz ? (
                            <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                Generating...
                            </>
                        ) : (
                        "Start Quiz"
                        )}
                    </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        )}

        {topicData && quizQuestions.length > 0 && topicLevel && (
            <QuizDisplay
            isOpen={showQuiz}
            onClose={closeQuizDisplay}
            questions={quizQuestions}
            topic={topicData.title}
            level={topicLevel}
            />
        )}


      <footer className="p-4 mt-auto text-center text-sm text-muted-foreground">
        © {new Date().getFullYear()} EduAI. All rights reserved.
      </footer>
    </div>
  );
}
