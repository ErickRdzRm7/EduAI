
// This file is generated by Firebase Studio.
'use client';

import { useState, useEffect, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation'; // Import useRouter
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { ArrowLeft, MessageCircle, Moon, Sun, ClipboardCheck, Loader2, Pencil, Trash2 } from 'lucide-react'; // Added Pencil, Trash2
import Link from 'next/link';
import AiTutor from '@/components/ai-tutor';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { generateQuiz, type GenerateQuizInput, type GenerateQuizOutput, type QuizQuestion } from '@/ai/flows/generate-quiz-flow';
import QuizDisplay from '@/components/quiz-display';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger, // Import AlertDialogTrigger
} from "@/components/ui/alert-dialog";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";


// --- Topic Data Management ---

interface TopicDetail {
  id: string;
  title: string;
  level?: string; // Level might be optional here if not always applicable
  description?: string; // Description might be optional
  content: Record<string, string[]>; // Beginner, Intermediate, Advanced content
}

// Default topics structure matching TopicDetail
const DEFAULT_TOPIC_DETAILS: Record<string, TopicDetail> = {
  'java-programming': {
    id: 'java-programming',
    title: 'Java Programming',
    content: {
      Beginner: [/* ... content ... */ 'Introduction to Java: What is Java? History, Features.', 'Setting up the Environment: JDK Installation, IDE Setup (IntelliJ, Eclipse).', 'Basic Syntax: Variables, Data Types, Operators.', 'Control Flow: If-else statements, Loops (for, while).', 'First Java Program: Hello World!',],
      Intermediate: [/* ... content ... */'Object-Oriented Programming (OOP): Classes, Objects, Inheritance, Polymorphism, Encapsulation.', 'Methods: Defining and Calling Methods.', 'Arrays and Collections: ArrayList, HashMap.', 'Exception Handling: Try-catch blocks.',],
      Advanced: [/* ... content ... */ 'Generics: Understanding Type Parameters.', 'Multithreading: Creating and Managing Threads.', 'File I/O: Reading and Writing Files.', 'Introduction to Java Frameworks (Spring Boot).', 'Lambda Expressions and Streams.',],
    },
  },
  'intermediate-mathematics': {
    id: 'intermediate-mathematics',
    title: 'Intermediate Mathematics',
    content: {
      Beginner: [ /* ... content ... */ 'Review of Algebra: Equations, Inequalities.', 'Functions: Domain, Range, Types of Functions.', 'Introduction to Limits.',],
      Intermediate: [ /* ... content ... */ 'Derivatives: Definition, Rules (Power, Product, Quotient, Chain).', 'Applications of Derivatives: Rate of Change, Optimization.', 'Integrals: Definite and Indefinite Integrals, Fundamental Theorem of Calculus.', 'Techniques of Integration.', ],
      Advanced: [ /* ... content ... */ 'Sequences and Series: Convergence Tests.', 'Differential Equations: First Order Equations.', 'Multivariable Calculus Introduction.',],
    },
  },
  'organic-chemistry-principles': {
     id: 'organic-chemistry-principles',
     title: 'Organic Chemistry Principles',
     content: {
         Beginner: [ /* ... content ... */ 'Introduction to Organic Chemistry: Bonding, Lewis Structures.', 'Functional Groups: Alkanes, Alkenes, Alkynes, Alcohols, Ethers.', 'Nomenclature: IUPAC Naming.', ],
         Intermediate: [ /* ... content ... */ 'Stereochemistry: Chirality, Enantiomers, Diastereomers.', 'Reaction Mechanisms: SN1, SN2, E1, E2 Reactions.', 'Spectroscopy Basics: IR, NMR.',],
         Advanced: [ /* ... content ... */ 'Aromaticity: Huckel\'s Rule, Electrophilic Aromatic Substitution.', 'Carbonyl Chemistry: Aldehydes, Ketones, Carboxylic Acids and Derivatives.', 'Synthesis Strategies.', 'Advanced Spectroscopic Analysis.',]
     }
  },
    'data-structures': {
    id: 'data-structures',
    title: 'Data Structures',
    content: {
      Beginner: [ /* ... content ... */ 'Introduction: What are Data Structures? Why are they important?', 'Arrays: Definition, Operations, Time Complexity.', 'Linked Lists: Singly Linked Lists, Doubly Linked Lists.',],
      Intermediate: [ /* ... content ... */ 'Stacks: LIFO Principle, Operations (Push, Pop).', 'Queues: FIFO Principle, Operations (Enqueue, Dequeue).', 'Trees: Binary Trees, Binary Search Trees (BST).', 'Tree Traversal: Inorder, Preorder, Postorder.',],
      Advanced: [ /* ... content ... */ 'Graphs: Representation (Adjacency Matrix, Adjacency List).', 'Graph Traversal: Breadth-First Search (BFS), Depth-First Search (DFS).', 'Hash Tables: Collision Resolution Techniques.', 'Heaps: Min-Heap, Max-Heap.',],
    },
  },
   'linear-algebra': {
    id: 'linear-algebra',
    title: 'Linear Algebra',
    content: {
      Beginner: [ /* ... content ... */ 'Introduction to Vectors: Geometric Interpretation, Operations.', 'Matrices: Definition, Types, Operations (Addition, Multiplication).', 'Systems of Linear Equations: Gaussian Elimination.',],
      Intermediate: [ /* ... content ... */ 'Vector Spaces and Subspaces.', 'Linear Independence, Basis, Dimension.', 'Determinants: Properties and Calculation.', ],
      Advanced: [ /* ... content ... */ 'Eigenvalues and Eigenvectors.', 'Diagonalization.', 'Inner Product Spaces, Orthogonality.', 'Linear Transformations.',],
    },
  },
   'web-development-basics': {
    id: 'web-development-basics',
    title: 'Web Development Basics',
    content: {
      Beginner: [ /* ... content ... */ 'Introduction to the Web: How Websites Work.', 'HTML Fundamentals: Tags, Elements, Attributes, Structure.', 'Basic HTML Elements: Headings, Paragraphs, Lists, Links, Images.', 'Introduction to CSS: Selectors, Properties, Values.',],
      Intermediate: [ /* ... content ... */ 'CSS Box Model: Margin, Border, Padding, Content.', 'CSS Layouts: Flexbox basics, Grid basics.', 'Styling Text and Fonts.', 'Introduction to JavaScript: Variables, Data Types, Operators.',],
      Advanced: [ /* ... content ... */ 'JavaScript Functions and Control Flow.', 'DOM Manipulation Basics.', 'Event Handling.', 'Responsive Design Principles.', 'Introduction to Version Control (Git).',],
    },
  },
};

const LOCAL_STORAGE_TOPICS_KEY = 'eduai-topics'; // Key for the summary list
const LOCAL_STORAGE_DETAILS_KEY = 'eduai-topic-details'; // Key for the detailed content

// Function to get topic details from localStorage
const getTopicDetailsFromStorage = (): Record<string, TopicDetail> => {
  if (typeof window === 'undefined') {
    return DEFAULT_TOPIC_DETAILS;
  }
  try {
    const storedDetails = localStorage.getItem(LOCAL_STORAGE_DETAILS_KEY);
    if (storedDetails) {
      return JSON.parse(storedDetails);
    } else {
      localStorage.setItem(LOCAL_STORAGE_DETAILS_KEY, JSON.stringify(DEFAULT_TOPIC_DETAILS));
      return DEFAULT_TOPIC_DETAILS;
    }
  } catch (error) {
    console.error("Error accessing or parsing localStorage for topic details:", error);
    return DEFAULT_TOPIC_DETAILS;
  }
};

// Function to save topic details to localStorage
const saveTopicDetailsToStorage = (details: Record<string, TopicDetail>) => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem(LOCAL_STORAGE_DETAILS_KEY, JSON.stringify(details));
    } catch (error) {
      console.error("Error saving topic details to localStorage:", error);
    }
  }
};

// Function to save the summary topic list to localStorage
const saveTopicsSummaryToStorage = (topics: { id: string; title: string; level: string; description: string }[]) => {
  if (typeof window !== 'undefined') {
    try {
      localStorage.setItem(LOCAL_STORAGE_TOPICS_KEY, JSON.stringify(topics));
      // Dispatch a storage event to notify other tabs/windows (like the home page)
      window.dispatchEvent(new StorageEvent('storage', { key: LOCAL_STORAGE_TOPICS_KEY }));
    } catch (error) {
      console.error("Error saving topics summary to localStorage:", error);
    }
  }
};

// Function to get the summary topic list from localStorage
const getTopicsSummaryFromStorage = (): { id: string; title: string; level: string; description: string }[] => {
   if (typeof window === 'undefined') return [];
   try {
     const stored = localStorage.getItem(LOCAL_STORAGE_TOPICS_KEY);
     return stored ? JSON.parse(stored) : [];
   } catch (error) {
     console.error("Error getting topics summary from localStorage:", error);
     return [];
   }
};


// --- End Topic Data Management ---


export default function TopicPage() {
  const params = useParams();
  const router = useRouter();
  const topicId = params.topicId as string;
  const [topicData, setTopicData] = useState<TopicDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [theme, setTheme] = useState<'light' | 'dark'>('dark');
  const [showAiTutor, setShowAiTutor] = useState(false);
  const [selectedLevel, setSelectedLevel] = useState<'Beginner' | 'Intermediate' | 'Advanced'>('Beginner');
  const { toast } = useToast();
  const [isGeneratingQuiz, setIsGeneratingQuiz] = useState(false);
  const [quizQuestions, setQuizQuestions] = useState<QuizQuestion[]>([]);
  const [showQuiz, setShowQuiz] = useState(false);
  const [showQuizConfirmation, setShowQuizConfirmation] = useState(false);
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
  const [numQuestions, setNumQuestions] = useState(3);

  const loadTopicData = useCallback(() => {
    setLoading(true);
    // Simulate fetching topic data
    setTimeout(() => {
      const allDetails = getTopicDetailsFromStorage();
      const data = allDetails[topicId];
      setTopicData(data || null); // Set to null if topic doesn't exist
      setLoading(false);
    }, 500);
  }, [topicId]);


  useEffect(() => {
    // Load theme from localStorage
    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
    if (savedTheme) {
      setTheme(savedTheme);
      if (savedTheme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    } else {
        document.documentElement.classList.add('dark'); // Default to dark
    }

    loadTopicData(); // Load topic data on initial mount and when topicId changes

  }, [topicId, loadTopicData]); // Add loadTopicData to dependency array

   // Theme application effect
  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  }, [theme]);


  const toggleTheme = () => {
    setTheme((prevTheme) => {
        const newTheme = prevTheme === 'light' ? 'dark' : 'light';
        try {
            localStorage.setItem('theme', newTheme);
        } catch (error) {
            console.error("Could not save theme preference:", error);
        }
        if (newTheme === 'dark') {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
        return newTheme;
    });
};

  const handleStartQuizGeneration = async () => {
    if (!topicData) return;
    setShowQuizConfirmation(false);
    setIsGeneratingQuiz(true);
    setQuizQuestions([]);

    try {
        const input: GenerateQuizInput = {
            topic: topicData.title,
            level: selectedLevel,
            numQuestions: numQuestions,
        };
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 1500));
        // Generate dummy quiz data if API key is invalid or for simulation
        const output: GenerateQuizOutput = {
          quiz: Array.from({ length: numQuestions }, (_, i) => ({
            question: `Simulated Question ${i + 1} for ${topicData.title} (${selectedLevel})?`,
            options: [`Option A${i}`, `Option B${i}`, `Option C${i}`, `Option D${i}`],
            correctAnswer: `Option B${i}`, // Example correct answer
          }))
        };
        // const output: GenerateQuizOutput = await generateQuiz(input); // Uncomment for actual API call

        if (output.quiz && output.quiz.length > 0) {
            setQuizQuestions(output.quiz);
            setShowQuiz(true);
        } else {
             toast({
                title: 'Quiz Generation Failed',
                description: 'Could not generate quiz questions. Please try again.',
                variant: 'destructive',
            });
        }

    } catch (error) {
        console.error('Error generating quiz:', error);
        const errorMsg = error instanceof Error && error.message.includes('API key not valid')
            ? 'Invalid or missing API key for quiz generation.'
            : 'An error occurred while generating the quiz.';

        toast({
            title: 'Error Generating Quiz',
            description: errorMsg + ' Displaying simulated quiz data instead.',
            variant: 'destructive',
        });

         // Fallback dummy data
        const fallbackOutput: GenerateQuizOutput = {
          quiz: Array.from({ length: numQuestions }, (_, i) => ({
            question: `Simulated Question ${i + 1} for ${topicData.title} (${selectedLevel})?`,
            options: [`Option A${i}`, `Option B${i}`, `Option C${i}`, `Option D${i}`],
            correctAnswer: `Option B${i}`,
          }))
        };
        setQuizQuestions(fallbackOutput.quiz);
        setShowQuiz(true);

    } finally {
        setIsGeneratingQuiz(false);
    }
  };

  const handleOpenQuizConfirmation = () => {
      setShowQuizConfirmation(true);
  }

  // --- Edit and Delete Handlers ---
  const handleEditTopic = () => {
    if (!topicData) return;
    console.log(`Editing topic: ${topicData.title} (ID: ${topicId})`);
    toast({
      title: 'Edit Topic',
      description: `Edit functionality for "${topicData.title}" is coming soon!`,
    });
  };

  const handleDeleteTopic = () => {
    if (!topicData) return;
    console.log(`Deleting topic: ${topicData.title} (ID: ${topicId})`);

    // 1. Delete from detailed topic data in localStorage
    const currentDetails = getTopicDetailsFromStorage();
    delete currentDetails[topicId];
    saveTopicDetailsToStorage(currentDetails);

    // 2. Delete from summary topic list in localStorage
    const currentSummary = getTopicsSummaryFromStorage();
    const updatedSummary = currentSummary.filter(topic => topic.id !== topicId);
    saveTopicsSummaryToStorage(updatedSummary); // This will trigger the storage event

    toast({
      title: 'Topic Deleted',
      description: `"${topicData.title}" has been deleted.`,
      variant: 'destructive'
    });

    setShowDeleteConfirmation(false);
    router.push('/'); // Redirect to home page
  };
  // --- End Edit and Delete Handlers ---


  if (loading) {
    return (
      <div className="container mx-auto p-4 md:p-6 lg:p-8 flex flex-col gap-6 min-h-screen">
        {/* Skeleton Header */}
        <header className="flex items-center justify-between p-4 bg-secondary rounded-md header-border">
           <div className="flex items-center gap-4">
             <Skeleton className="h-8 w-8 rounded-md" />
             <Skeleton className="h-8 w-48 rounded-md" />
           </div>
           <div className="flex items-center gap-2"> {/* Reduced gap */}
             <Skeleton className="h-8 w-8 rounded-md" /> {/* Edit Skeleton */}
             <Skeleton className="h-8 w-8 rounded-md" /> {/* Delete Skeleton */}
             <Skeleton className="h-8 w-8 rounded-full" /> {/* Theme Skeleton */}
             <Skeleton className="h-8 w-28 rounded-md" /> {/* Ask AI Skeleton */}
           </div>
        </header>
        {/* Skeleton Content */}
        <div className="p-4 space-y-4 flex-grow">
            <Skeleton className="h-10 w-full mb-4 rounded-md" /> {/* Tabs Skeleton */}
            <Card>
              <CardHeader>
                 <Skeleton className="h-6 w-1/3 mb-2 rounded-md"/>
              </CardHeader>
              <CardContent className="space-y-3">
                <Skeleton className="h-4 w-full rounded-md"/>
                <Skeleton className="h-4 w-full rounded-md"/>
                <Skeleton className="h-4 w-5/6 rounded-md"/>
                <Skeleton className="h-4 w-full rounded-md"/>
                <Skeleton className="h-4 w-4/6 rounded-md"/>
              </CardContent>
               <CardFooter>
                 <Skeleton className="h-10 w-36 rounded-md"/> {/* Skeleton for Quiz button */}
               </CardFooter>
            </Card>
        </div>
         <footer className="p-4 mt-auto text-center">
           <Skeleton className="h-4 w-1/2 mx-auto rounded-md"/>
         </footer>
      </div>
    );
  }

  if (!topicData) {
    return (
        <div className="container mx-auto p-4 md:p-6 lg:p-8 flex flex-col items-center justify-center gap-6 min-h-screen text-center">
            <h1 className="text-2xl font-bold text-destructive">Topic Not Found</h1>
            <p className="text-muted-foreground">The topic you requested ({topicId}) may have been deleted or does not exist.</p>
             <Link href="/" passHref>
                <Button variant="outline">
                     <ArrowLeft className="mr-2 h-4 w-4" /> Go Back Home
                </Button>
            </Link>
        </div>
    );
  }

  // Dynamically get levels available for the current topic
  const availableLevels = Object.keys(topicData.content) as Array<'Beginner' | 'Intermediate' | 'Advanced'>;
  // Ensure selectedLevel is valid for the current topic, default to the first available level
  const validSelectedLevel = availableLevels.includes(selectedLevel) ? selectedLevel : availableLevels[0];


  return (
    <div className="container mx-auto p-4 md:p-6 lg:p-8 flex flex-col gap-6 min-h-screen">
      <header className="flex items-center justify-between p-4 bg-secondary rounded-md header-border">
        <div className="flex items-center gap-4">
          <Link href="/" passHref>
            <Button variant="outline" size="icon" aria-label="Go back home">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>
          <h1 className="text-2xl font-bold">{topicData.title}</h1>
        </div>
         <div className="flex items-center gap-2">
            <Button variant="ghost" size="icon" onClick={handleEditTopic} aria-label="Edit topic">
              <Pencil className="h-5 w-5" />
            </Button>
            <AlertDialog open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>
              <AlertDialogTrigger asChild>
                  <Button variant="ghost" size="icon" aria-label="Delete topic" className="text-destructive hover:bg-destructive/10 hover:text-destructive">
                    <Trash2 className="h-5 w-5" />
                  </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This action cannot be undone. This will permanently delete the topic
                    "{topicData.title}".
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleDeleteTopic} className="bg-destructive text-destructive-foreground hover:bg-destructive/90">
                    Delete Topic
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
           <Button variant="ghost" size="icon" onClick={toggleTheme} aria-label="Toggle theme">
             {theme === 'light' ? <Moon className="h-5 w-5" /> : <Sun className="h-5 w-5" />}
           </Button>
           <Button variant="outline" onClick={() => setShowAiTutor(true)}>
             <MessageCircle className="mr-2 h-4 w-4" /> Ask AI Tutor
           </Button>
         </div>
      </header>

      <section className="p-4 flex-grow">
         <Tabs
            defaultValue={validSelectedLevel} // Use the validated level
            className="w-full"
            onValueChange={(value) => setSelectedLevel(value as 'Beginner' | 'Intermediate' | 'Advanced')}
            key={topicId} // Add key to force re-render Tabs when topic changes
            >
          <TabsList className={`grid w-full grid-cols-${availableLevels.length} mb-4`}>
            {availableLevels.map(level => (
                 <TabsTrigger key={level} value={level}>{level}</TabsTrigger>
            ))}
          </TabsList>

           {availableLevels.map(level => (
            <TabsContent key={level} value={level}>
                <Card>
                <CardHeader>
                    <CardTitle>{level} Level</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                    {topicData.content[level]?.map((item, index) => ( // Added safe navigation
                    <p key={index} className="text-foreground leading-relaxed">{item}</p>
                    )) ?? <p className="text-muted-foreground">No content available for this level.</p>}
                </CardContent>
                <CardFooter>
                    <Button variant="outline" onClick={handleOpenQuizConfirmation} disabled={isGeneratingQuiz}>
                    {isGeneratingQuiz ? (
                        <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Generating...
                        </>
                    ) : (
                       <>
                         <ClipboardCheck className="mr-2 h-4 w-4" /> Take a Quiz
                       </>
                    )}
                    </Button>
                </CardFooter>
                </Card>
            </TabsContent>
           ))}
        </Tabs>
      </section>

      {/* AI Tutor Drawer/Modal */}
      {topicData && ( // Only render if topicData exists
          <AiTutor
            isOpen={showAiTutor}
            onClose={() => setShowAiTutor(false)}
            topic={topicData.title}
            level={validSelectedLevel} // Pass the validated level
          />
      )}

       {/* Quiz Confirmation Dialog */}
        {topicData && ( // Only render if topicData exists
            <AlertDialog open={showQuizConfirmation} onOpenChange={setShowQuizConfirmation}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                    <AlertDialogTitle>Generate Quiz?</AlertDialogTitle>
                    <AlertDialogDescription>
                        Select the number of questions for your {validSelectedLevel} {topicData.title} quiz.
                    </AlertDialogDescription>
                    </AlertDialogHeader>
                    <div className="py-4">
                        <Label htmlFor="num-questions">Number of Questions (1-10):</Label>
                        <Select
                            value={String(numQuestions)}
                            onValueChange={(value) => setNumQuestions(parseInt(value))}
                        >
                            <SelectTrigger id="num-questions" className="w-[180px] mt-2">
                                <SelectValue placeholder="Select number" />
                            </SelectTrigger>
                            <SelectContent>
                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(n => (
                                    <SelectItem key={n} value={String(n)}>{n}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                    <AlertDialogFooter>
                    <AlertDialogCancel>Cancel</AlertDialogCancel>
                    <AlertDialogAction onClick={handleStartQuizGeneration} disabled={isGeneratingQuiz}>
                        {isGeneratingQuiz ? (
                            <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                Generating...
                            </>
                        ) : (
                        "Start Quiz"
                        )}
                    </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        )}

        {/* Quiz Display Dialog */}
        {topicData && quizQuestions.length > 0 && ( // Only render if topicData exists
            <QuizDisplay
            isOpen={showQuiz}
            onClose={() => {
                 setShowQuiz(false);
                 setQuizQuestions([]);
            }}
            questions={quizQuestions}
            topic={topicData.title}
            level={validSelectedLevel} // Pass validated level
            />
        )}


      <footer className="p-4 mt-auto text-center text-sm text-muted-foreground">
        © {new Date().getFullYear()} EduAI. All rights reserved.
      </footer>
    </div>
  );
}

    