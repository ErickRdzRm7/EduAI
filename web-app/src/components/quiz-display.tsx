// This file is generated by Firebase Studio.
'use client';

import type { QuizQuestion } from '@/ai/flows/generate-quiz-flow';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useState, useEffect } from 'react';
import { CheckCircle, XCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface QuizDisplayProps {
  isOpen: boolean;
  onClose: () => void;
  questions: QuizQuestion[];
  topic: string;
  level: 'Beginner' | 'Intermediate' | 'Advanced';
}

interface AnswerState {
  selectedOption: string | null;
  isCorrect: boolean | null;
}

export default function QuizDisplay({
  isOpen,
  onClose,
  questions,
  topic,
  level,
}: QuizDisplayProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  // Use an array for answers, index corresponds to question index
  const [answers, setAnswers] = useState<AnswerState[]>([]);
  const [showResults, setShowResults] = useState(false);

  // Initialize answers state when questions change or dialog opens
  useEffect(() => {
    if (isOpen) {
        setAnswers(Array(questions.length).fill({ selectedOption: null, isCorrect: null }));
        setCurrentQuestionIndex(0);
        setShowResults(false);
    }
  }, [isOpen, questions]);


  const currentQuestion = questions[currentQuestionIndex];
  const answerStateForCurrentQuestion = answers[currentQuestionIndex];
  // Check if an answer has been selected and evaluated for the current question
  const isAnswerSubmitted = answerStateForCurrentQuestion?.isCorrect !== null;

  const handleOptionChange = (value: string) => {
    // Only allow changing the answer if it hasn't been submitted yet for the current question
    if (isAnswerSubmitted) return;

    const isCorrect = value === currentQuestion.correctAnswer;

    setAnswers((prevAnswers) => {
        const newAnswers = [...prevAnswers];
        newAnswers[currentQuestionIndex] = {
            selectedOption: value,
            isCorrect: isCorrect, // Evaluate correctness immediately
        };
        return newAnswers;
    });
    // No separate submit step needed now
  };


  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      // Reached the end, show results
      setShowResults(true);
    }
  };

  const handleRestartQuiz = () => {
     // Re-initialize state
     setAnswers(Array(questions.length).fill({ selectedOption: null, isCorrect: null }));
     setCurrentQuestionIndex(0);
     setShowResults(false);
  };

   const calculateScore = () => {
    // Count correct answers from the state array
    return answers.filter(a => a.isCorrect === true).length;
  };

  const score = calculateScore();


  return (
    <Dialog open={isOpen} onOpenChange={(open) => {
        if (!open) {
            // Reset state when closing the dialog externally
            handleRestartQuiz();
            onClose();
        }
    }}>
      <DialogContent className="sm:max-w-[600px] flex flex-col max-h-[90vh]">
        <DialogHeader>
          <DialogTitle>
            {topic} Quiz ({level})
          </DialogTitle>
          <DialogDescription>
            Test your knowledge! Select the best answer for each question.
          </DialogDescription>
        </DialogHeader>

        {/* Use key to force remount ScrollArea content when question changes, ensuring scroll position resets */}
        <ScrollArea className="flex-grow pr-6 -mr-6" key={currentQuestionIndex}>
          <div className="py-4 space-y-6">
            {!showResults && currentQuestion && (
              <div>
                <p className="font-semibold mb-4">
                  Question {currentQuestionIndex + 1} of {questions.length}
                </p>
                <p className="mb-4">{currentQuestion.question}</p>
                <RadioGroup
                  value={answerStateForCurrentQuestion?.selectedOption ?? undefined}
                  onValueChange={handleOptionChange}
                  className="space-y-2"
                >
                  {currentQuestion.options.map((option, index) => {
                    const isSelected = answerStateForCurrentQuestion?.selectedOption === option;
                    const isCorrectAnswer = currentQuestion.correctAnswer === option;
                    const showFeedback = isAnswerSubmitted; // Show feedback only after selection/submission

                    return (
                        <Label
                            key={index}
                            htmlFor={`q${currentQuestionIndex}-o${index}`}
                            className={cn(
                              "flex items-center space-x-3 rounded-md border p-3 transition-colors",
                              // Correct answer styling (only when feedback is shown)
                              showFeedback && isCorrectAnswer && "border-green-500 bg-green-500/10 text-green-700 dark:text-green-400",
                              // Incorrectly selected answer styling (only when feedback is shown)
                              showFeedback && isSelected && !isCorrectAnswer && "border-red-500 bg-red-500/10 text-red-700 dark:text-red-400",
                              // Style selected before submit (if not showing feedback yet)
                              !showFeedback && isSelected && "border-primary bg-primary/5",
                              // Cursor and hover state based on whether the answer is submitted
                              isAnswerSubmitted ? "cursor-not-allowed opacity-70" : "cursor-pointer hover:bg-accent/50"
                            )}
                        >
                            <RadioGroupItem
                                value={option}
                                id={`q${currentQuestionIndex}-o${index}`}
                                disabled={isAnswerSubmitted} // Disable radio button after selection
                                className="shrink-0"
                                aria-label={option} // Add aria-label for screen readers
                            />
                            <span className="flex-1">
                              {option}
                            </span>
                            {/* Feedback Icons */}
                            {showFeedback && isCorrectAnswer && <CheckCircle className="h-5 w-5 text-green-500 ml-auto shrink-0" />}
                            {showFeedback && isSelected && !isCorrectAnswer && <XCircle className="h-5 w-5 text-red-500 ml-auto shrink-0" />}
                      </Label>
                    );
                  })}
                </RadioGroup>
              </div>
            )}

             {showResults && (
                <div className="text-center space-y-4">
                    <h3 className="text-xl font-semibold">Quiz Completed!</h3>
                    <p className="text-lg">
                    Your Score: <span className="font-bold">{score}</span> out of <span className="font-bold">{questions.length}</span>
                    </p>
                    <p className="text-muted-foreground">
                        {score === questions.length ? "Excellent work!" : score >= questions.length / 2 ? "Good job!" : "Keep practicing!"}
                    </p>
                    <Button onClick={handleRestartQuiz}>Take Quiz Again</Button>
                </div>
            )}

          </div>
        </ScrollArea>

        <DialogFooter className="mt-4 pt-4 border-t">
            {!showResults && (
                 <div className="flex justify-end w-full"> {/* Changed justify-between to justify-end */}
                    {/* Removed Submit Answer Button */}
                    <Button
                        onClick={handleNextQuestion}
                         // Enable Next/Results only after selecting an answer for the current question
                         disabled={!isAnswerSubmitted}
                    >
                        {currentQuestionIndex < questions.length - 1 ? 'Next Question' : 'Show Results'}
                    </Button>
                </div>
            )}
             {showResults && (
                <DialogClose asChild>
                    <Button variant="outline" onClick={() => {
                         // Explicitly call onClose which should handle state reset via useEffect
                         onClose();
                    }}>Close</Button>
                 </DialogClose>
            )}

        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
