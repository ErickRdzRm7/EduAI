// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview An AI tutor that answers questions about educational content.
 *
 * - askAiTutor - A function that handles the question answering process.
 * - AskAiTutorInput - The input type for the askAiTutor function.
 * - AskAiTutorOutput - The return type for the askAiTutor function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AskAiTutorInputSchema = z.object({
  topic: z.string().describe('The educational topic the user is studying (e.g., Java Programming).'),
  level: z.enum(['Beginner', 'Intermediate', 'Advanced']).describe('The difficulty level of the topic.'),
  question: z.string().describe('The specific question the user has about the content.'),
});
export type AskAiTutorInput = z.infer<typeof AskAiTutorInputSchema>;

const AskAiTutorOutputSchema = z.object({
  answer: z.string().describe('The AI tutor answer to the question, including explanations and examples.'),
});
export type AskAiTutorOutput = z.infer<typeof AskAiTutorOutputSchema>;

export async function askAiTutor(input: AskAiTutorInput): Promise<AskAiTutorOutput> {
  return askAiTutorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'askAiTutorPrompt',
  input: {
    schema: z.object({
      topic: z.string().describe('The educational topic the user is studying (e.g., Java Programming).'),
      level: z.enum(['Beginner', 'Intermediate', 'Advanced']).describe('The difficulty level of the topic.'),
      question: z.string().describe('The specific question the user has about the content.'),
    }),
  },
  output: {
    schema: z.object({
      answer: z.string().describe('The AI tutor answer to the question, including explanations and examples.'),
    }),
  },
  prompt: `You are an AI tutor specializing in explaining {{{topic}}} at the {{{level}}} level.\n\nAnswer the following question clearly, providing detailed explanations and relevant practical examples tailored to the user's topic and level:\n\nQuestion: {{{question}}}`,
});

const askAiTutorFlow = ai.defineFlow<
  typeof AskAiTutorInputSchema,
  typeof AskAiTutorOutputSchema
>(
  {
    name: 'askAiTutorFlow',
    inputSchema: AskAiTutorInputSchema,
    outputSchema: AskAiTutorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
