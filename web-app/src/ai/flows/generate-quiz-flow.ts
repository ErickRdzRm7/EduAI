// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview AI flow to generate a multiple-choice quiz.
 *
 * - generateQuiz - A function that generates a quiz based on a topic and level.
 * - GenerateQuizInput - The input type for the generateQuiz function.
 * - GenerateQuizOutput - The return type for the generateQuiz function.
 * - QuizQuestion - The type for a single quiz question.
 */

import { ai } from '@/ai/ai-instance';
import { z } from 'genkit';

const GenerateQuizInputSchema = z.object({
  topic: z.string().describe('The educational topic for the quiz (e.g., Java Programming).'),
  level: z.enum(['Beginner', 'Intermediate', 'Advanced']).describe('The difficulty level of the quiz.'),
  numQuestions: z.number().int().positive().min(1).max(10).default(3).describe('The number of multiple-choice questions to generate (default 3, max 10).'),
});
export type GenerateQuizInput = z.infer<typeof GenerateQuizInputSchema>;

const QuizQuestionSchema = z.object({
    question: z.string().describe('The text of the multiple-choice question.'),
    options: z.array(z.string()).length(4).describe('An array of exactly 4 possible answers for the question.'),
    correctAnswer: z.string().describe('The correct answer string, which must exactly match one of the strings in the options array.'),
});
export type QuizQuestion = z.infer<typeof QuizQuestionSchema>;

const GenerateQuizOutputSchema = z.object({
  quiz: z.array(QuizQuestionSchema).describe('An array of generated quiz questions.'),
});
export type GenerateQuizOutput = z.infer<typeof GenerateQuizOutputSchema>;

export async function generateQuiz(input: GenerateQuizInput): Promise<GenerateQuizOutput> {
  return generateQuizFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateQuizPrompt',
  input: {
    schema: GenerateQuizInputSchema,
  },
  output: {
    schema: GenerateQuizOutputSchema,
  },
  prompt: `Generate a multiple-choice quiz about the topic "{{topic}}" at the "{{level}}" difficulty level.

The quiz should contain exactly {{numQuestions}} questions.

For each question:
1.  Provide the question text.
2.  Provide exactly 4 distinct answer options.
3.  Clearly indicate the correct answer, ensuring it matches one of the provided options exactly.

Format the output strictly according to the provided JSON schema. Ensure the 'correctAnswer' field exactly matches one of the strings in the 'options' array for each question.`,
});

const generateQuizFlow = ai.defineFlow<
  typeof GenerateQuizInputSchema,
  typeof GenerateQuizOutputSchema
>(
  {
    name: 'generateQuizFlow',
    inputSchema: GenerateQuizInputSchema,
    outputSchema: GenerateQuizOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    // Basic validation to ensure the correct number of questions was generated
    if (output?.quiz?.length !== input.numQuestions) {
        console.warn(`AI generated ${output?.quiz?.length ?? 0} questions, but ${input.numQuestions} were requested.`);
        // Handle discrepancy if needed, e.g., truncate, pad, or throw error
        // For now, we'll just return what we got, or an empty array if null/undefined
        return { quiz: output?.quiz ?? [] };
    }
    return output!;
  }
);
